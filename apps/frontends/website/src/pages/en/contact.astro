---
import Layout from '@/layouts/PageLayout.astro';
import HeroText from '@/components/widgets/HeroText.astro';
import ContactUs from '@/components/widgets/Contact.astro';
import Features2 from '@/components/widgets/Features2.astro';

const metadata = {
  title: 'Contact Us',
};
---

<Layout metadata={metadata}>
  <div class="text-center">
    <HeroText tagline=' ' title='<span class="text-primary">We look forward to hearing from you!</span>' />

    <div class="relative mx-auto mt-4 h-16 w-16">
      <span class="absolute inline-flex h-full w-full animate-ping rounded-full bg-primary opacity-75"></span>
      <span class="relative inline-flex h-16 w-16 items-center justify-center rounded-full bg-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      </span>
    </div>
  </div>

  <!-- Contact Us Form -->
  <ContactUs
    id='form'
    title='Business Inquiry'
    subtitle='Please fill out the form below, and we will get back to you as soon as possible.'
    inputs={[
      {
        type: 'text',
        name: 'name',
        label: 'Your Name',
        placeholder: 'Enter your name'
      },
      {
        type: 'text',
        name: 'company',
        label: 'Company Name',
        placeholder: 'Enter your company name'
      },
       {
        type: 'tel',
        name: 'phone',
        label: 'Phone Number',
        placeholder: 'Enter your phone number'
      },
      {
        type: 'email',
        name: 'email',
        label: 'Email Address',
        placeholder: 'you@example.com'
      }
    ]}
    textarea={{
      name: 'message',
      label: 'Your Needs or Partnership Interests',
      placeholder: 'Please describe your needs in detail here...'
    }}
    button='Submit Information'
  >
    <Fragment slot='bg'>
      <div
        id='snackbar-toast'
        class='toast absolute bottom-6 right-12 z-10 rounded-md border bg-white p-4 shadow-lg dark:bg-slate-900'
        hidden
      >
      </div>
    </Fragment>
  </ContactUs>

  <!-- Features Section -->
  <Features2
    title='We are always here for you!'
    items={[
      {
        title: 'Business Cooperation',
        description: 'If you are interested in our products and services, we look forward to discussing cooperation opportunities with you to provide the most suitable AI solutions for your business.',
      },
      {
        title: 'Technical Support',
        description: 'Our technical team provides professional technical support to help you solve any issues you encounter during use, ensuring stable system operation.',
      },
      {
        title: 'After-sales Service',
        description: 'We provide a comprehensive after-sales service system to ensure that your needs are responded to and resolved in a timely manner, providing support for your business.',
      },
      {
        title: 'Telephone',
        description: '16628597963',
        icon: 'tabler:headset',
      },
      {
        title: 'Email',
        description: '<a href="mailto:contact@unisudo.com" class="hover:text-primary">contact@unisudo.com</a>',
        icon: 'tabler:mail',
      },
      {
        title: 'Company Address',
        description: 'Room 802, 8th Floor, Building 1, Block 2, Gangcheng Plaza, 55 Shuiyun Road, Lingang Free Trade Zone, Pudong New Area, Shanghai',
        icon: 'tabler:map-pin',
      },
    ]}
  />
</Layout>

<script>
  function toast(message: string) {
    const toastElem = document.getElementById('snackbar-toast');
    if (!toastElem) {
      console.error('Could not find the toast element');
      return;
    }
    toastElem.innerText = message;
    toastElem.hidden = false;
    setTimeout(() => {
      toastElem.hidden = true;
      toastElem.innerText = '';
    }, 3000);
  }

  const form = document.querySelector('#form form');
  const button = form?.querySelector('button[type="submit"]');

  if (!form || !button) {
    console.error('Could not find the contact form or submit button');
  } else {
    const originalButtonHTML = button.innerHTML;

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      button.setAttribute('disabled', '');
      button.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Submitting...
      `;

      const formData = new FormData(form as HTMLFormElement);
      const formProps = Object.fromEntries(formData);

      const payload = {
        name: formProps["name"],
        email: formProps["email"],
        phone: formProps["phone"],
        company: formProps["company"],
        message: formProps["message"],
        subject: 'Business Inquiry',
        source: 'Website Contact Page'
      };

      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

      if (!supabaseUrl || !supabaseAnonKey) {
        console.error('Supabase URL or Anon Key is not defined in environment variables.');
        toast('Client configuration error.');
        button.removeAttribute('disabled');
        button.innerHTML = originalButtonHTML;
        return;
      }

      try {
        const response = await fetch(`${supabaseUrl}/functions/v1/sendmail`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${supabaseAnonKey}`,
          },
          body: JSON.stringify(payload),
        });

        if (response.ok) {
          await response.json();
          toast('Thank you for your message. We have received your information and will get back to you as soon as possible.');
          (form as HTMLFormElement).reset();
          
          button.removeAttribute('disabled');
          button.innerHTML = originalButtonHTML;

        } else {
          const errorData = await response.json().catch(() => null);
          toast(`Submission failed (${response.status}): ${errorData?.message || 'Please try again later'}`);
          button.removeAttribute('disabled');
          button.innerHTML = originalButtonHTML;
        }
      } catch (error) {
        console.error('Form submission error:', error);
        toast('Submission failed. Please check your network connection.');
        button.removeAttribute('disabled');
        button.innerHTML = originalButtonHTML;
      }
    });
  }
</script>