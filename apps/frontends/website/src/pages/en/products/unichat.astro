---
import Layout from '@/layouts/LandingLayout.astro';
import Hero from '@/components/widgets/Hero.astro';
import Features from '@/components/widgets/Features.astro';
import Stats from '@/components/widgets/Stats.astro';
import ContactUs from '@/components/widgets/Contact.astro';
import Demo from '@/components/widgets/Demo.astro';

const metadata = {
  title: 'UniChat - Intelligent Customer Service Assistant',
};

const features = [
  {
    title: 'Real-time Dialogue Service',
    description:
      'You can create a real-time dialogue robot with a knowledge base and conduct a 5-minute real-time dialogue.',
    icon: 'tabler:message-circle',
    link: '#',
    linkText: 'Free Trial',
    textColor: 'text-black',
  },
  {
    title: 'Text-to-Speech (TTS) Service',
    description: 'High-quality speech synthesis service, charged at 1 yuan per 10,000 tokens.',
    icon: 'tabler:volume',
    link: '#',
    linkText: 'Register and recharge now to enjoy an 80% discount!',
    textColor: 'text-black',
  },
  {
    title: 'Knowledge Base Retrieval (RAG) Service',
    description: 'Enterprise users customize their own knowledge base and retrieve it.',
    icon: 'tabler:search',
    link: '#',
    linkText: 'Learn more',
    textColor: 'text-black',
  },
];

const stats = [
  {
    title: 'Customer Satisfaction',
    amount: '98%',
    icon: 'tabler:user-check',
  },
  {
    title: 'Customer Service Response Time',
    amount: '< 10 seconds',
    icon: 'tabler:clock',
  },
];

const advantages = [
  {
    title: 'Quick Configuration',
    description: 'Simply input industry knowledge, and our AI can quickly provide precise services for you.',
    icon: 'tabler:bolt',
  },
  {
    title: 'Multi-scenario Application',
    description:
      'Our AI technology is applicable to various scenarios, including customer service, sales, and Q&A assistants.',
    icon: 'tabler:layout-grid',
  },
];
---

<Layout metadata={metadata}>
  <!-- Hero Section -->
  <Hero
    tagline=' '
    title='Start the Intelligent Era'
    subtitle='UniChat is an AI Agent application that provides intelligent solutions for customer service, sales, and Q&A assistants through TTS, RAG, and CV technologies. Simply provide industry knowledge, and AI can efficiently serve, smartly helping business development.'
    actions={[
      {
        variant: 'primary',
        text: 'Free Trial',
        href: 'https://limit-4o-monorepo.vercel.app/my',
        icon: 'tabler:arrow-right',
      },
      {
        variant: 'secondary',
        text: 'Product Case',
        href: '#',
      },
    ]}
  />

  <!-- Demo Section -->
  <Demo />

  <!-- Services Section -->
  <section class='mx-auto max-w-6xl px-4 py-16 motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'>
    <div class='mb-12 text-center'>
      <h2 class='mb-4 text-3xl font-bold'>Our Services</h2>
      <p class='text-gray-600'>We provide comprehensive AI solutions for you</p>
    </div>
    <div class='grid gap-8 md:grid-cols-3'>
      {
        features.map((feature) => (
          <div class='rounded-lg bg-white p-6 shadow-sm transition-all hover:shadow-md'>
            <div class='mb-4 text-primary'>
              <i class={feature.icon} />
            </div>
            <h3 class={`mb-2 text-xl font-semibold ${feature.textColor || ''}`}>{feature.title}</h3>
            <p class='mb-4 text-gray-600'>{feature.description}</p>
            <a href={feature.link} class='text-blue-600 hover:text-blue-700'>
              {feature.linkText}
            </a>
          </div>
        ))
      }
    </div>
  </section>

  <!-- Stats Section -->
  <Stats
    title='Intelligent Customer Service Enhances Customer Satisfaction'
    subtitle='UniChat is an AI Agent application that provides intelligent solutions for customer service, sales, and Q&A assistants through TTS, RAG, and CV technologies. Simply provide industry knowledge, and AI can efficiently serve, smartly helping business development.'
    stats={stats}
  />

  <!-- Features -->
  <Features
    title='Our Advantages'
    subtitle={`
      <div class="relative inline-block">
        <span class="text-3xl font-bold text-primary animate-pulse">
          Industry 1/50 Real-time Rate
        </span>
        <div class="absolute -inset-1 bg-primary/20 blur-lg -z-10"></div>
      </div>
    `}
    items={advantages}
    columns={2}
  />

  <!-- Contact Us -->
  <ContactUs
    id='form'
    title='Start Using Intelligent Services'
    subtitle='Experience the efficiency boost from AI'
    inputs={[
      {
        type: 'text',
        name: 'name',
        label: 'Name',
      },
      {
        type: 'email',
        name: 'email',
        label: 'Email',
      },
    ]}
    textarea={{
      name: 'message',
      label: 'Message',
    }}
    button='Contact Us'
  >
    <Fragment slot='bg'>
      <div
        id='snackbar-toast'
        class='toast absolute bottom-6 right-12 z-10 rounded-md border bg-white p-4 shadow-lg dark:bg-slate-900'
        hidden
      >
      </div>
    </Fragment>
  </ContactUs>
</Layout>

<script>
  function toast(message: string) {
    const toastElem = document.getElementById('snackbar-toast');
    if (!toastElem) {
      console.error('Could not find the toast element');
    }
    toastElem!.innerText = message;
    toastElem!.hidden = false;
    setTimeout(() => {
      toastElem!.hidden = true;
      toastElem!.innerText = '';
    }, 3000);
  }

  const button = document.querySelector('button[type="submit"]');
  const form = document.querySelector('form');

  if (!button || !form) {
    console.error('Could not find the button or form');
  }

  form!.addEventListener('submit', (event) => {
    event.preventDefault();
    const formData = new FormData(form!);
    if (!formData) {
      return;
    }
    fetch(`${import.meta.env.PUBLIC_USER_API_BASE_URL}/v1/wishlist`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(Object.fromEntries(formData)),
    }).then((res) => {
      if (res.status === 200) {
        toast('Submitted successfully');
        button!.setAttribute('disabled', '');
      } else if (res.status === 409) {
        toast('User already exists');
      } else {
        toast('Failed to submit');
      }
    });
  });
</script>

<style>
  @keyframes highlight {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.05);
      opacity: 0.9;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  .animate-highlight {
    animation: highlight 2s ease-in-out infinite;
  }
</style>
